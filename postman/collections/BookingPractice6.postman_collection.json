{
	"info": {
		"_postman_id": "d32e7758-dae0-4363-89d2-3bb8a93b7ed5",
		"name": "Booking Practice 6",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Bookings",
			"item": [
				{
					"name": "Get All Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b40fac89-9ba7-413c-ac28-6c6862ce7a67",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"//we created at least one booking at the folder level, so there should always be bookings",
									"pm.test(\"Response is not empty\", function () {",
									"    // See Chaijs docs for complete list of available assertions",
									"    // https://www.chaijs.com/api/bdd",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By First Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3d81276-1a3b-4cd7-8dd4-ae6d961cf079",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2590d063-a637-4284-a573-4bab2114bb97",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"// since we created the object with this value at the folder level,",
									"// the search should always return at least one id",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);",
									"});",
									"",
									"// use lodash map to get a flat array of all the returned booking ids",
									"// [{\"bookingid:1\"},{\"bookingid:2\"}] ==> [1, 2]",
									"var booking_ids = _.map(jsonData, 'bookingid');",
									"",
									"// the id for our newly created object should be in the list of ids",
									"pm.test(\"Expected booking id is in the returned array\", function () {",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking?firstname={{firstname}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Last Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db727689-4bee-4c89-8d4d-62a95f9fdb97",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0cdc5b5f-0782-464b-b86a-eced8c4e2285",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);",
									"});",
									"",
									"// use lodash map to get a flat array of all the returned booking ids",
									"var booking_ids = _.map(jsonData, 'bookingid');",
									"",
									"// the id for our newly created object should be there",
									"pm.test(\"Expected booking id is in the returned array\", function () {",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking?lastname={{lastname}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By First and Last Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "57d90acc-f0a7-4ee4-b3e7-d4734eb3cf2e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8390cfd8-ab28-478a-a337-388f3726eb39",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);",
									"});",
									"",
									"// use lodash map to get a flat array of all the returned booking ids",
									"var booking_ids = _.map(jsonData, 'bookingid');",
									"",
									"// the id for our newly created object should be there",
									"pm.test(\"Expected booking id is in the returned array\", function () {",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking?firstname={{firstname}}&lastname={{lastname}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Checkin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "09366f8f-b81d-4f9f-b6b1-87c652305ae9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e260e80-f784-4d36-8e1f-86db08c56815",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);",
									"});",
									"",
									"// use lodash map to get a flat array of all the returned booking ids",
									"// https://lodash.com/docs/4.17.11#map",
									"var booking_ids = _.map(jsonData, 'bookingid');",
									"console.log(booking_ids);",
									"",
									"// the id for our newly created object should be there",
									"pm.test(\"Expected booking id is in the returned array\", function () {",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking?checkin={{checkin}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Checkout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "46caa5d1-4e48-4a58-adba-d72020366c2b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a5b3772-b542-4ee8-b159-c2f132d47f9f",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);",
									"});",
									"",
									"// use lodash map to get a flat array of all the returned booking ids",
									"// https://lodash.com/docs/4.17.11#map",
									"var booking_ids = _.map(jsonData, 'bookingid');",
									"",
									"// the id for our newly created object should be there",
									"pm.test(\"Expected booking id is in the returned array\", function () {",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking?checkout={{checkout}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54529ff7-fbe5-4d0c-b55a-1d8ac9b7b7f7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is empty\", function () {",
									"    pm.expect(jsonData).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking?firstname=non_existent_name",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "non_existent_name"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4637e13e-3620-45dd-a5ae-7484d4557ca2",
						"type": "text/javascript",
						"exec": [
							"",
							"const createBooking = {",
							"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
							"  method: 'POST',",
							"  header: 'Content-Type:application/json',",
							"  body: {",
							"    mode: 'raw',",
							"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
							"  }",
							"};",
							"pm.sendRequest(createBooking, function (err, res) {",
							"    pm.expect(err).is.null;",
							"    pm.variables.set(\"booking_id\", res.json().bookingid)",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65e830f8-54f5-40ec-869d-a1f85951cbc9",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"if(jsonData.length > 0){",
							"    pm.test(\"Responses are booking ids\", function() {",
							"        // lodash forEach will iterate through each object ",
							"        // in the array and apply the given function",
							"        // https://lodash.com/docs/4.17.11#forEach",
							"        _.forEach(jsonData, function(booking) {",
							"            pm.expect(booking).to.have.property(\"bookingid\")",
							"        })",
							"    })",
							"}"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Get Booking by ID",
			"item": [
				{
					"name": "Existing ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "079ab5a1-6cfd-4ca8-94cb-fd82fddf3962",
								"exec": [
									"const createBooking = {",
									"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
									"  }",
									"};",
									"pm.sendRequest(createBooking, function (err, res) {",
									"    pm.expect(err).is.null;",
									"    pm.variables.set(\"booking_id\", res.json().bookingid)",
									"    pm.variables.set(\"expected\", res.json().booking)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "da66c743-2f47-4d1c-a565-5ffab408ae16",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected booking is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"expected\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking/{{booking_id}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-Existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be634fb2-fa13-43b2-b492-5133ca9f6f45",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bookingBaseUrl}}/booking/0",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Booking",
			"item": [
				{
					"name": "Valid Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c76164eb-ec2e-487b-afbf-87ae5500829a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response booking is correct\", function () {",
									"    var booking = pm.response.json().booking;",
									"    pm.expect(booking.firstname, \"unexpected firstname\").to.eql(pm.variables.get(\"firstname\"));",
									"    pm.expect(booking.lastname, \"unexpected lastname\").to.eql(pm.variables.get(\"lastname\"));",
									"    pm.expect(booking.totalprice, \"unexpected totalprice\").to.eql(pm.variables.get(\"totalprice\"));",
									"    pm.expect(booking.depositpaid, \"unexpected depositpaid\").to.eql(pm.variables.get(\"depositpaid\"));",
									"    pm.expect(booking.bookingdates.checkin, \"unexpected checkin\").to.eql(pm.variables.get(\"checkin\"));",
									"    pm.expect(booking.bookingdates.checkout, \"unexpected checkout\").to.eql(pm.variables.get(\"checkout\"));",
									"    pm.expect(booking.additionalneeds, \"unexpected additionalneeds\").to.eql(pm.variables.get(\"additionalneeds\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{bookingBaseUrl}}/booking",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "First name is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51bd881c-6611-42e9-b251-2831b032cb58",
								"exec": [
									"pm.test(\"Create fails\", function () {",
									"    pm.response.to.not.have.success;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : null,\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{bookingBaseUrl}}/booking",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Modify Booking",
			"item": [
				{
					"name": "Valid Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f6c88c5-d4ef-4896-88f5-0e2e411525c9",
								"exec": [
									"// create the base booking",
									"const createBooking = {",
									"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
									"  }",
									"};",
									"pm.sendRequest(createBooking, function (err, res) {",
									"    pm.expect(err).is.null;",
									"    pm.variables.set(\"booking_id\", res.json().bookingid)",
									"});",
									"",
									"const uuid = require(\"uuid\");",
									"// reset the firstname and lastname variables",
									"pm.variables.set(\"firstname\", uuid());",
									"pm.variables.set(\"lastname\", uuid());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "967a521a-5c08-4250-9736-fb8c7fccbd37",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var booking = pm.response.json();",
									"pm.test(\"Response firstname is correct\", function () {",
									"    pm.expect(booking.firstname, \"unexpected firstname\").to.eql(pm.variables.get(\"firstname\"));",
									"});",
									"pm.test(\"Response lastname is correct\", function () {",
									"    pm.expect(booking.lastname, \"unexpected lastname\").to.eql(pm.variables.get(\"lastname\"));",
									"});",
									"pm.test(\"Response totalprice is correct\", function () {",
									"    pm.expect(booking.totalprice, \"unexpected totalprice\").to.eql(pm.variables.get(\"totalprice\"));",
									"});",
									"pm.test(\"Response depositpaid is correct\", function () {",
									"    pm.expect(booking.depositpaid, \"unexpected depositpaid\").to.eql(pm.variables.get(\"depositpaid\"));",
									"});",
									"pm.test(\"Response checkin is correct\", function () {",
									"    pm.expect(booking.bookingdates.checkin, \"unexpected checkin\").to.eql(pm.variables.get(\"checkin\"));",
									"});",
									"pm.test(\"Response checkout is correct\", function () {",
									"    pm.expect(booking.bookingdates.checkout, \"unexpected checkout\").to.eql(pm.variables.get(\"checkout\"));",
									"});",
									"pm.test(\"Response additionalneeds is correct\", function () {",
									"    pm.expect(booking.additionalneeds, \"unexpected additionalneeds\").to.eql(pm.variables.get(\"additionalneeds\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{bookingBaseUrl}}/booking/{{booking_id}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Invalid Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "190556af-d7fb-438e-8c8d-644fd7690c20",
								"exec": [
									"// create the base booking",
									"const createBooking = {",
									"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
									"  }",
									"};",
									"pm.sendRequest(createBooking, function (err, res) {",
									"    pm.expect(err).is.null;",
									"    pm.variables.set(\"booking_id\", res.json().bookingid)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7683aaca-5788-4147-8f13-ac1597077d4f",
								"exec": [
									"pm.test(\"Update fails\", function () {",
									"    pm.response.to.not.have.success;",
									"});",
									"",
									"pm.sendRequest(pm.environment.get(\"bookingBaseUrl\") + \"/booking/\" + pm.variables.get(\"booking_id\"), function (err, res) {",
									"  if (err) { console.log(err); }",
									"  pm.test('Booking is unchanged', function () {",
									"    pm.expect(err).to.equal(null);",
									"    pm.expect(res.text()).to.include(pm.variables.get(\"firstname\"));",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : null,\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{bookingBaseUrl}}/booking/{{booking_id}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Invalid Date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a3ecc45b-27bd-4502-bbb2-da07cfe2b944",
								"exec": [
									"// create the base booking",
									"const createBooking = {",
									"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
									"  }",
									"};",
									"pm.sendRequest(createBooking, function (err, res) {",
									"    pm.expect(err).is.null;",
									"    pm.variables.set(\"booking_id\", res.json().bookingid)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acbec037-165e-4042-b895-0e316e74bbc6",
								"exec": [
									"pm.test(\"Update fails\", function () {",
									"    pm.response.to.not.have.success;",
									"});",
									"",
									"pm.sendRequest(pm.environment.get(\"bookingBaseUrl\") + \"/booking/\" + pm.variables.get(\"booking_id\"), function (err, res) {",
									"  if (err) { console.log(err); }",
									"  pm.test('Booking is unchanged', function () {",
									"    pm.expect(err).to.equal(null);",
									"    pm.expect(res.text()).to.include(pm.variables.get(\"firstname\"));",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"2019-12-32\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						"url": {
							"raw": "{{bookingBaseUrl}}/booking/{{booking_id}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Patch Modify Booking",
			"item": [
				{
					"name": "Partial Update Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bc95b26d-0e6a-4694-bd84-501e0b39d7e0",
								"exec": [
									"// create the base booking",
									"const createBooking = {",
									"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
									"  }",
									"};",
									"pm.sendRequest(createBooking, function (err, res) {",
									"    pm.expect(err).is.null;",
									"    pm.variables.set(\"booking_id\", res.json().bookingid)",
									"});",
									"",
									"const uuid = require(\"uuid\");",
									"// reset the firstname and lastname variables",
									"pm.variables.set(\"firstname\", uuid());",
									"pm.variables.set(\"lastname\", uuid());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "92cd3919-bd11-4909-86a2-3ebe63690873",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var booking = pm.response.json();",
									"pm.test(\"Response firstname is correct\", function () {",
									"    pm.expect(booking.firstname, \"unexpected firstname\").to.eql(pm.variables.get(\"firstname\"));",
									"});",
									"pm.test(\"Response lastname is correct\", function () {",
									"    pm.expect(booking.lastname, \"unexpected lastname\").to.eql(pm.variables.get(\"lastname\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\"\n}"
						},
						"url": {
							"raw": "{{bookingBaseUrl}}/booking/{{booking_id}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Patch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b810c8b-6c0b-42dc-8e32-7a906ced6661",
								"exec": [
									"// create the base booking",
									"const createBooking = {",
									"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
									"  }",
									"};",
									"pm.sendRequest(createBooking, function (err, res) {",
									"    pm.expect(err).is.null;",
									"    pm.variables.set(\"booking_id\", res.json().bookingid)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b906cbda-afd8-4e6c-ae25-153e9e68016f",
								"exec": [
									"pm.test(\"Patch fails\", function () {",
									"    pm.response.to.not.have.success;",
									"});",
									"",
									"pm.sendRequest(pm.environment.get(\"bookingBaseUrl\") + \"/booking/\" + pm.variables.get(\"booking_id\"), function (err, res) {",
									"  if (err) { console.log(err); }",
									"  pm.test('Booking is unchanged', function () {",
									"    pm.expect(err).to.equal(null);",
									"    pm.expect(res.text()).to.include(pm.variables.get(\"firstname\"));",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : null,\n    \"lastname\" : \"{{lastname}}\"\n}"
						},
						"url": {
							"raw": "{{bookingBaseUrl}}/booking/{{booking_id}}",
							"host": [
								"{{bookingBaseUrl}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9b2dcf7-8c51-4e3d-9a2c-c49b570bb86b",
						"exec": [
							"pm.test(\"Ping is successful\", function () {",
							"    pm.response.to.be.success;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{bookingBaseUrl}}/ping",
					"host": [
						"{{bookingBaseUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1b739a4-46ad-4dd3-9214-67b112498155",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"token\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
				},
				"url": {
					"raw": "{{bookingBaseUrl}}/auth",
					"host": [
						"{{bookingBaseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "849f5907-ebd5-4d3b-aee6-7b9d2745a805",
						"exec": [
							"// create the base booking",
							"const createBooking = {",
							"  url: pm.environment.get(\"bookingBaseUrl\") + \"/booking\",",
							"  method: 'POST',",
							"  header: 'Content-Type:application/json',",
							"  body: {",
							"    mode: 'raw',",
							"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
							"  }",
							"};",
							"pm.sendRequest(createBooking, function (err, res) {",
							"    pm.expect(err).is.null;",
							"    pm.variables.set(\"booking_id\", res.json().bookingid)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "45ff6564-416f-4de1-ad64-d2d4768e8dcb",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.sendRequest(pm.environment.get(\"bookingBaseUrl\") + \"/booking/\" + pm.variables.get(\"booking_id\"), function (err, res) {",
							"  if (err) { console.log(err); }",
							"  pm.test('Booking no longer exists', function () {",
							"    pm.expect(err).to.equal(null);",
							"    pm.expect(res.code).to.eql(404);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"url": {
					"raw": "{{bookingBaseUrl}}/booking/{{booking_id}}",
					"host": [
						"{{bookingBaseUrl}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2c617a34-e7bf-44f2-801b-b545045b3243",
				"type": "text/javascript",
				"exec": [
					"//assign first name and last name with dinamic variables ",
					"",
					"pm.variables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));",
					"pm.variables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));",
					"",
					"// the random function comes from the loadash module (\"_.\")",
					"// https://lodash.com/docs/4.17.11#random",
					"pm.variables.set(\"totalprice\", _.random(50, 250));",
					"pm.variables.set(\"depositpaid\", (_.random(1) === 1));",
					"",
					"// the moment module helps with date manipulation and formatting",
					"const moment = require(\"moment\");",
					"var checkin = moment().add(\"days\", _.random(1, 180));",
					"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
					"",
					"var checkout = checkin.add(\"days\", _.random(1, 14));",
					"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
					"",
					"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];",
					"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length-1)]);",
					"",
					"// put all the selected variables into a new booking object and save to a variable",
					"var booking = {",
					"    \"firstname\" :pm.variables.get(\"firstname\"),",
					"    \"lastname\" : pm.variables.get(\"lastname\"),",
					"    \"totalprice\" : pm.variables.get(\"totalprice\"),",
					"    \"depositpaid\" : pm.variables.get(\"depositpaid\"),",
					"    \"bookingdates\" : {",
					"        \"checkin\" : pm.variables.get(\"checkin\"),",
					"        \"checkout\" : pm.variables.get(\"checkout\")",
					"    },",
					"    \"additionalneeds\" : pm.variables.get(\"additionalneeds\")",
					"}",
					"pm.variables.set(\"new_booking\", booking)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d2810200-1fee-47c0-b697-7f8fd0df2f88",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}